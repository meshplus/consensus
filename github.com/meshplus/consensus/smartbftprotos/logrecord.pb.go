// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: smartbftprotos/logrecord.proto

package smartbftprotos

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LogRecord_Type int32

const (
	LogRecord_ENTRY      LogRecord_Type = 0
	LogRecord_CONTROL    LogRecord_Type = 1
	LogRecord_CRC_ANCHOR LogRecord_Type = 2
)

var LogRecord_Type_name = map[int32]string{
	0: "ENTRY",
	1: "CONTROL",
	2: "CRC_ANCHOR",
}

var LogRecord_Type_value = map[string]int32{
	"ENTRY":      0,
	"CONTROL":    1,
	"CRC_ANCHOR": 2,
}

func (x LogRecord_Type) String() string {
	return proto.EnumName(LogRecord_Type_name, int32(x))
}

func (LogRecord_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d6f88cf2e7d665db, []int{0, 0}
}

type LogRecord struct {
	Type       LogRecord_Type `protobuf:"varint,1,opt,name=type,proto3,enum=smartbftprotos.LogRecord_Type" json:"type,omitempty"`
	TruncateTo bool           `protobuf:"varint,2,opt,name=truncate_to,json=truncateTo,proto3" json:"truncate_to,omitempty"`
	Data       []byte         `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *LogRecord) Reset()         { *m = LogRecord{} }
func (m *LogRecord) String() string { return proto.CompactTextString(m) }
func (*LogRecord) ProtoMessage()    {}
func (*LogRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6f88cf2e7d665db, []int{0}
}
func (m *LogRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRecord.Merge(m, src)
}
func (m *LogRecord) XXX_Size() int {
	return m.Size()
}
func (m *LogRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LogRecord proto.InternalMessageInfo

func (m *LogRecord) GetType() LogRecord_Type {
	if m != nil {
		return m.Type
	}
	return LogRecord_ENTRY
}

func (m *LogRecord) GetTruncateTo() bool {
	if m != nil {
		return m.TruncateTo
	}
	return false
}

func (m *LogRecord) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("smartbftprotos.LogRecord_Type", LogRecord_Type_name, LogRecord_Type_value)
	proto.RegisterType((*LogRecord)(nil), "smartbftprotos.LogRecord")
}

func init() { proto.RegisterFile("smartbftprotos/logrecord.proto", fileDescriptor_d6f88cf2e7d665db) }

var fileDescriptor_d6f88cf2e7d665db = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0xce, 0x4d, 0x2c,
	0x2a, 0x49, 0x4a, 0x2b, 0x29, 0x28, 0xca, 0x2f, 0xc9, 0x2f, 0xd6, 0xcf, 0xc9, 0x4f, 0x2f, 0x4a,
	0x4d, 0xce, 0x2f, 0x4a, 0xd1, 0x03, 0x0b, 0x08, 0xf1, 0xa1, 0xca, 0x2b, 0x2d, 0x61, 0xe4, 0xe2,
	0xf4, 0xc9, 0x4f, 0x0f, 0x02, 0xab, 0x11, 0x32, 0xe2, 0x62, 0x29, 0xa9, 0x2c, 0x48, 0x95, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x33, 0x92, 0xd3, 0x43, 0x55, 0xac, 0x07, 0x57, 0xa8, 0x17, 0x52, 0x59,
	0x90, 0x1a, 0x04, 0x56, 0x2b, 0x24, 0xcf, 0xc5, 0x5d, 0x52, 0x54, 0x9a, 0x97, 0x9c, 0x58, 0x92,
	0x1a, 0x5f, 0x92, 0x2f, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1, 0x11, 0xc4, 0x05, 0x13, 0x0a, 0xc9, 0x17,
	0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x94, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0xb3,
	0x95, 0xf4, 0xb8, 0x58, 0x40, 0x46, 0x08, 0x71, 0x72, 0xb1, 0xba, 0xfa, 0x85, 0x04, 0x45, 0x0a,
	0x30, 0x08, 0x71, 0x73, 0xb1, 0x3b, 0xfb, 0xfb, 0x85, 0x04, 0xf9, 0xfb, 0x08, 0x30, 0x0a, 0xf1,
	0x71, 0x71, 0x39, 0x07, 0x39, 0xc7, 0x3b, 0xfa, 0x39, 0x7b, 0xf8, 0x07, 0x09, 0x30, 0x39, 0xb9,
	0x9d, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb,
	0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x4e, 0x7a, 0x66, 0x49, 0x46,
	0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x6e, 0x6a, 0x71, 0x46, 0x41, 0x4e, 0x69, 0xb1, 0x7e,
	0x72, 0x7e, 0x5e, 0x71, 0x6a, 0x5e, 0x71, 0x69, 0xb1, 0x3e, 0xaa, 0x0f, 0x92, 0xd8, 0xc0, 0xb4,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x2c, 0x91, 0x2a, 0x27, 0x01, 0x00, 0x00,
}

func (m *LogRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintLogrecord(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TruncateTo {
		i--
		if m.TruncateTo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintLogrecord(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLogrecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovLogrecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovLogrecord(uint64(m.Type))
	}
	if m.TruncateTo {
		n += 2
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovLogrecord(uint64(l))
	}
	return n
}

func sovLogrecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLogrecord(x uint64) (n int) {
	return sovLogrecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogrecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= LogRecord_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TruncateTo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TruncateTo = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogrecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogrecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLogrecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogrecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogrecord
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLogrecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogrecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogrecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogrecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogrecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLogrecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLogrecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLogrecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLogrecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogrecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLogrecord = fmt.Errorf("proto: unexpected end of group")
)
